<mxfile host="app.diagrams.net" modified="2021-09-25T17:32:47.972Z" agent="5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36" etag="MacxOR9-skobd4nu_XCA" version="15.3.2" type="device"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="ZAFKYH06HvY_KNRMYuV9" name="Page-1">7VrbctowEP0aPyYjX3EeE8ilM8lMOulMm0cFC6zGthxZBDtfXwnJN2wIDQZDyxPSSitbe/Zod2U0cximtxTG/gPxUKAZwEs1c6QZhg5Ml/8ISSYltjWQginFnppUCp7wB8o1lXSGPZTUJjJCAobjunBMogiNWU0GKSXz+rQJCepPjeEUNQRPYxg0pT+xx3wpdW1Qyu8Qnvr5k3WgRkKYT1aCxIcemVdE5rVmDikhTLbCdIgCYbzcLlLvZsVo8WIURWwThTSKLPdtQEmafdy9ou8PYPTjzFHvxrJ8w8jj+1ddQplPpiSCwXUpvaJkFnlIrAp4r5xzT0jMhToX/kaMZQpMOGOEi3wWBmoUpZj9Eurntuo9V0ZGqVp50cnyTsRoVlES3efqWKm26OV6cn9iUyvNpkQJmdExWmOr3P0gnSK2Zp5RgMtZgUiI+PtwPYoCyPB7/T2gcs9pMa9EkDcUiH8B6OAEaOeAmn0C6p4A7RxQq09AL06Adg6o3Segat13GMzUk4Y+IQnishHF0WsD7xJNAcDcxww9xXBhiDnPourIqcURZShdb8/m/pWCaakUROVgeXdeJjR6nqX4lWTGAbuymN6wyYkDa9OJDTigg3Yn2A8JjAYJlO+DJtafeDxMYpnJT3Aq8O6CAm6dAbrTpIDbwgB3ZwwwjoUBHXrytnmUUn0kmD+5gNYCdWwboEnmKK0l3IrX+DqU5krP52In4Da6SmIY1cB23mai7JNn/1kiqXApzEpROcpbU/WrGeaFbAVSciPXzCf0z7AiWhwMxcxjodgBBBnrKIKMtZJq5v9ENevgqGYdC9U6pMy2NcdhRjN7JcWaGPfg+o55aK7fbzlfcfySBp9EGb0WY8qQs4dyftvo0c4ZfbBU3xr75Uz+uOoNAEz8Vse4hy8oWOJJgKcRb4+5PRHlAsEQPIbBpRoIsedJv0EJ/oAvi/UENLHY0WKP9pVmj9ZRTH0fUcpa8VWiCuMaB19JyDNwrttO/ciSvS1BNQa1RfMCM1+ATCYJ2g2aR1OaHUDemH+m+zxx7PWKzmgWaUOKPCz8bQip929QVXruOqqCC9esx8/tuLp7NurNs/URZouAz+O9QE8ctIBQ0V4LKfVJ+DJL9nPjCgbndnseV710de1mpqLrO0tVmrndrQANZJzlwu98kiBRPLXfWveQ7ZlLhU6R/fWV7RlOw4TPKDnFi80vsze9aDD6jRe9fnXVtS9k9eDQEe05A2jeHX1LyvgRwyxEi5AWEnEvBJi/uEeS03l8mRTnonnTa2i5WFHrVOOK03Im6stFUXem7fU/Jx2QZZ8lsGEfB11W5QpjzgtuhgNIDvSlqyCnhQkdJQe8W/5PT2a25b8dzes/</diagram></mxfile>